pool:
  vmImage: 'macOS-10.15'

variables:
- name: BuildConfiguration
  value: DebugNoGui

steps:

#- task: Bash@3
#  displayName: Provision
#  inputs:
#    targetType: 'inline'
#    script: '$(Build.SourcesDirectory)/bot-provisioning/provisionator-bootstrap.sh $(Build.SourcesDirectory)/bot-provisioning/dependencies.csx'
#    workingDirectory: '$(Build.SourcesDirectory)'

- task: DotNetCoreCLI@2
  displayName: 'Build solution Mono.Addins.sln'
  inputs:
    command: build
    arguments: '/p:Configuration=$(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Generating packages'
  inputs:
    command: pack
    projects: 'Mono.Addins.sln'
    arguments: '/p:Configuration=$(BuildConfiguration)'
    nobuild: true

#- task: MSBuild@1
#  displayName: 'Test Assemblies Test\UnitTests\bin\Debug\UnitTests.dll'
#  inputs:
#    solution: 'Test/UnitTests/UnitTests.csproj'
#    platform: '$(BuildPlatform)'
#    configuration: '$(BuildConfiguration)'
#    msbuildArguments: '/t:Test'
#
#- task: PublishTestResults@2
#  displayName: 'Publish Test Results Test\UnitTests\TestResult.xml'
#  inputs:
#    testResultsFormat: 'NUnit'
#    testResultsFiles: 'Test/UnitTests/TestResult.xml'
#    failTaskOnFailedTests: true

- task: CopyFiles@1
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)/bin'
    Contents: '*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

